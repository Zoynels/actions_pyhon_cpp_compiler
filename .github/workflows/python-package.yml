name: Python + CPP package

on:
  push:
    # if tag "v0.0.1" and branch "master" then workflow will run twice
    # first for branch where github.ref = refs/heads/master
    # second for tag where github.ref = refs/tags/v0.0.1 and here is could trigger release workflow
    branches:
      - master
    tags:
      - v*
    paths:
      - '**'
      - '!**.md'
      - '!.gitattributes'
      - '!.gitmodules'
      - '!.gitignore'
      - '!external/**'
      - '!docs/**'
  pull_request:
    branches:
      - master
    tags:
      - '*'
    paths:
      - '**'
      - '!**.md'
      - '!.gitattributes'
      - '!.gitmodules'
      - '!.gitignore'
      - '!external/**'
      - '!docs/**'


jobs:
  quick_test_ubuntu_py38_x64:
    # test build only on one config, if all ok, then run same steps on other configs
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true # fail-fast: true meant that if one test fail, then all running tests will be canceled
      matrix:
        config:
        - { name: "manylinux on ubuntu", os: ubuntu-latest, python-version: 3.8, architecture: x64, artifact_name: "ubuntu-latest.py38_x64.zip" }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.config.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python-version }}
        architecture: ${{ matrix.config.architecture }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools

    - name: Build manylinux Python wheels
      uses: RalfG/python-wheels-manylinux-build@v0.2.2-manylinux2010_x86_64
      with:
        python-versions: 'cp37-cp37m'
        build-requirements: ''
        system-packages: ''
        package-path: ''
        pip-wheel-args: '--no-deps'

    - name: Upload wheel artifact
      if: ${{ success() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact_name }}
        path: wheelhouse/*-manylinux*.whl




  build_all:
    needs: [release]
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true # fail-fast: true meant that if one test fail, then all running tests will be canceled
      matrix:
        config:
        # python 3.7 (macOS and Ubuntu has no x86 version)
        - { name: "Windows MSVC (py37_x86)", os: windows-latest, python-version: 3.7, architecture: x86, artifact_name: "windows-latest.py37_x86.whl.zip" }
        - { name: "Windows MSVC (py37_x64)", os: windows-latest, python-version: 3.7, architecture: x64, artifact_name: "windows-latest.py37_x64.whl.zip" }
        - { name: "macOS (py37_x64)", os: macos-latest, python-version: 3.7, architecture: x64, artifact_name: "macos-latest.py37_x64.whl.zip" }
        # not a many linux
        #- { name: "Ubuntu (py37_x64)", os: ubuntu-latest, python-version: 3.7, architecture: x64, artifact_name: "ubuntu-latest.py37_x64.whl.zip" }

        # python 3.8 (macOS and Ubuntu has no x86 version)
        - { name: "Windows MSVC (py38_x86)", os: windows-latest, python-version: 3.8, architecture: x86, artifact_name: "windows-latest.py38_x86.whl.zip" }
        - { name: "Windows MSVC (py38_x64)", os: windows-latest, python-version: 3.8, architecture: x64, artifact_name: "windows-latest.py38_x64.whl.zip" }
        - { name: "macOS (py38_x64)", os: macos-latest, python-version: 3.8, architecture: x64, artifact_name: "macos-latest.py38_x64.whl.zip" }
        # not a many linux
        # already run in build_test_ubuntu_py38_x64
        #- { name: "Ubuntu (py38_x64)", os: ubuntu-latest, python-version: 3.8, architecture: x64, artifact_name: "ubuntu-latest.py38_x64.whl.zip" }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.config.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python-version }}
        architecture: ${{ matrix.config.architecture }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel flake8 pytest twine isort

    - name: Build package (setup.py)
      run: |
        python setup.py build --build-lib=lib bdist_wheel

    - name: Install package (dist/*.whl)
      run: |
        python util_funcs.py --func="install_dist" --pat="dist/**/*.whl" --pkg_name="actions_python_cpp_compiler"

    - name: Test with builtin test function
      run: |
        python -c "import actions_python_cpp_compiler; actions_python_cpp_compiler.run_tests()"

    - name: Lint with isort
      if: ${{ always() }}
      working-directory: pkg/python
      run: |
        isort --diff .
        isort --check-only .

    - name: Lint with flake8
      if: ${{ always() }}
      working-directory: pkg/python
      run: |
        flake8 . --count --max-complexity=10 --statistics

    - name: Twine check
      run: |
        twine check dist/*

    - name: Upload wheel artifact
      if: ${{ success() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.artifact_name }}
        path: dist/*.whl

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quick_test_ubuntu_py38_x64]
    name: "release"
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'false'
 
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Get tag name
      id: get_version
      run: echo ::set-output name=TAG_NAME::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        files: |
            artifacts/**/*.whl
        body_path: readme.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Copy whl files into dist folder
      run: |
        python util_funcs.py --func=copyfiles --pat=artifacts/**/*.whl --dest_to=dist

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U twine

    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME_TOKEN }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD_TOKEN_TEST }}
      run: |
        twine upload --non-interactive --verbose --repository-url https://test.pypi.org/legacy/ dist/*
    #  uses: pypa/gh-action-pypi-publish@master
    #  with:
    #    user: __token__
    #    password: ${{ secrets.PYPI_PASSWORD_TOKEN_TEST}}
    #    packages_dir: dist/
    #    repository_url: https://test.pypi.org/legacy/
    #    skip_existing: true
